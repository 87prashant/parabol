
interface TrackMeetingCompleted {
  userId: string
  wasFacilitator: boolean
  meetingNumber: number
  meetingType: MeetingTypeEnum
  meetingTemplateName: string
  meetingMembersCount: number // current: teamMembersCount
  meetingMembersPresentCount: number // current: teamMembersPresentCount
  teamId: string
}

interface TrackEnterpriseOverUserLimit {
  userId: string // delete? billing leader
  orgId: string
}

interface TrackConnectWebSocket { // delete?
  userId: string
  connectedSockets: string[] // delete?
  tms: string[] // delete?
}

interface TrackDisconnectWebSocket { // delete?
  userId: string
}

interface TrackInviteAccepted {
  userId: string
  teamId: string
}

interface TrackCommentAdded {
  userId: string
  meetingId: string
  teamId: string
  isAnonymous: boolean
  isAsync: string
  isReply: boolean
}

interface TrackNewOrg {
  userId: string
  orgId: string
  teamId: string
  fromSignup: boolean
}

interface TrackNewTeam {
  userId: string
  orgId: string
  teamId: string
  teamNumber: number // how many teams on the org
}

interface TrackArchiveOrganization {
  userId: string
  orgId: string
}

interface TrackArchiveTeam {
  userId: string
  teamId: string
}

interface TrackPublishedTaskToGitHub {
  userId: string
  teamId: string
  meeting: string | null
}

interface TrackPublishedTaskToJira {
  userId: string
  teamId: string
  meeting: string | null
}

interface TrackTaskAdded {
  userId: string
  meetingId: string
  teamId: string
  isAsync: boolean
  isReply: boolean
}

interface TackDowngradeToPersonal {
  userId: string
  orgId: string
}

interface TrackInviteEmailSent {
  userId: string
  teamId: string
  invitees: string[]
}

interface TrackInviteNonParabolUser { // this feels wrong, we should mege with InviteEmailSent
  userId: string
  invitee: string
  inviteTo: 'meeting' | 'team'
}

interface TrackConversionModalPayLaterClicked {
  userId: string
  orgId: string // current: payLaterOrgId
  clickCount: string // current: payLaterClickCount
}

interface TrackMeetingTimerStarted {
  isAsync: boolean
  meetingId: string
  newScheduledEndTime: Date | null
  phaseType: NewMeetingPhaseTypeEnum
  previousScheduledEndTime: Date | null
  stageStartAt: Date | null
  timeRemaining: number // ms
  viewCount: number
}

interface TrackMeetingTimerStopped {
  isAsync: boolean
  meetingId: string
  newScheduledEndTime: Date | null
  phaseType: NewMeetingPhaseTypeEnum
  previousScheduledEndTime: Date | null
  stageStartAt: Date | null
  timeRemaining: number // ms
  viewCount: number
}

interface TrackMeetingTimerUpdated {
  isAsync: boolean
  meetingId: string
  newScheduledEndTime: Date | null
  phaseType: NewMeetingPhaseTypeEnum
  previousScheduledEndTime: Date | null
  stageStartAt: Date | null
  timeRemaining: number // ms
  viewCount: number
}

interface TrackSmartGroupTitleChanged {
  userId: string
  similarity: number // 0 - 1
  smartTitle: string
  title: string
}

interface TrackUpgradeToPro {
  userId: string
  orgId: string
}

interface TrackAccountCreated {
  userId: string
  isInvited: boolean
}

// ********** CLIENT SIDE **********
interface TrackUserLogout {
  userId: string
}

interface TrackUserLogin {
  userId: string
}

interface TrackHelpMenuOpen {
  userId: string
  phase: NewMeetingPhaseTypeEnum,
  meetingCount: number // number of meetings the user has been in
}

// ********** PAGE EVENTS **********

interface SegmentPageEvent {
  userId: string
  name: string
  path: string
  referrer: string
  search: string
  title: string
  url: string
}


// ********** HUBSPOT **********

interface HubSpotCompany {
  activeTeamCount: number

}

interface HubSpotContact {
  teamLeadCount: number

}

interface SegmentIdentifyEvent {

}

interface SegmentPageEvent {

}
interface SegmentTrackEvent {
  email: string

}
